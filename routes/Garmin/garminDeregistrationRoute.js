import express from "express";
import { getPrismaClient } from '../../config/database.js';
import { findAthleteByGarminUserId } from '../../services/garminFindAthleteService.js';

const router = express.Router();

// Top-level middleware logger for all Garmin webhooks
router.use((req, res, next) => {
  console.log(`üì° Garmin webhook incoming: ${req.method} ${req.originalUrl}`);
  next();
});

// PUT /api/garmin/deregistration - Handle user deregistration webhooks (Garmin preferred method)
router.put("/deregistration", async (req, res) => {
  // 1Ô∏è‚É£ Immediately respond with 200 OK to Garmin
  res.sendStatus(200);

  try {
    const prisma = getPrismaClient();
    
    // 2Ô∏è‚É£ Parse req.body.userId (Garmin userId)
    const { userId } = req.body;
    
    if (!userId) {
      console.log('‚ö†Ô∏è No userId found in deregistration payload');
      return;
    }
    
    console.log(`üì© Garmin deregistration for ${userId}`);

    // 3Ô∏è‚É£ Use findAthleteByGarminUserId() service to find the athlete
    const athlete = await findAthleteByGarminUserId(userId);
    
    if (!athlete) {
      console.log(`‚ö†Ô∏è No athlete found for Garmin user ${userId}`);
      return;
    }
    
    // 4Ô∏è‚É£ Wipe all Garmin data and set disconnected status
    const result = await prisma.athlete.updateMany({
      where: { garmin_user_id: userId },
      data: {
        garmin_access_token: null,
        garmin_refresh_token: null,
        garmin_expires_in: null,
        garmin_scope: null,
        garmin_permissions: null,
        garmin_is_connected: false,
        garmin_disconnected_at: new Date()
      }
    });
    
    // 5Ô∏è‚É£ Log success as required
    console.log(`‚úÖ Garmin tokens wiped for athlete ${athlete.id} (userId: ${userId})`);
    
  } catch (error) {
    // 6Ô∏è‚É£ Catch any errors, log them, and ensure Garmin always receives a 200 response
    console.error('‚ùå Garmin deregistration webhook error:', error);
  }
});

// POST /api/garmin/deregistration - Handle user deregistration webhooks (fallback method)
router.post("/deregistration", async (req, res) => {
  // 1Ô∏è‚É£ Immediately respond with 200 OK to Garmin
  res.sendStatus(200);

  try {
    const prisma = getPrismaClient();
    
    // 2Ô∏è‚É£ Parse req.body.userId (Garmin userId)
    const { userId } = req.body;
    
    if (!userId) {
      console.log('‚ö†Ô∏è No userId found in deregistration payload');
      return;
    }
    
    console.log(`üì© Garmin deregistration for ${userId}`);

    // 3Ô∏è‚É£ Use findAthleteByGarminUserId() service to find the athlete
    const athlete = await findAthleteByGarminUserId(userId);
    
    if (!athlete) {
      console.log(`‚ö†Ô∏è No athlete found for Garmin user ${userId}`);
      return;
    }
    
    // 4Ô∏è‚É£ Wipe all Garmin data and set disconnected status
    const result = await prisma.athlete.updateMany({
      where: { garmin_user_id: userId },
      data: {
        garmin_access_token: null,
        garmin_refresh_token: null,
        garmin_expires_in: null,
        garmin_scope: null,
        garmin_permissions: null,
        garmin_is_connected: false,
        garmin_disconnected_at: new Date()
      }
    });
    
    // 5Ô∏è‚É£ Log success as required
    console.log(`‚úÖ Garmin tokens wiped for athlete ${athlete.id} (userId: ${userId})`);
    
  } catch (error) {
    // 6Ô∏è‚É£ Catch any errors, log them, and ensure Garmin always receives a 200 response
    console.error('‚ùå Garmin deregistration webhook error:', error);
  }
});

export default router;
