// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Athlete {
  id        String @id @default(cuid())
  firebaseId String @unique
  
  // Universal Profile (MVP1 Required)
  firstName    String?
  lastName     String?
  email        String @unique
  phoneNumber  String?  // Optional phone number
  gofastHandle String? @unique
  birthday     DateTime?
  gender       String?
  city         String?
  state        String?
  primarySport String?
  photoURL     String?
  bio          String?
  instagram    String?
  
  // RunCrew Integration (MVP1)
  runCrewId    String?  // Optional - if null, show "Join RunCrew" card
  
  // Training Profile (Future)
  currentPace     String?
  weeklyMileage   Int?
  trainingGoal    String?
  targetRace      String?
  trainingStartDate DateTime?
  
  // Match Profile (Future)
  preferredDistance String?
  timePreference    String?
  paceRange         String?
  runningGoals      String?
  
  // Garmin OAuth 2.0 PKCE Integration
  garmin_user_id        String? @unique  // Garmin's unique user ID
  garmin_access_token   String?  // OAuth access token
  garmin_refresh_token  String?  // OAuth refresh token
  garmin_expires_in     Int?     // Token expiration time in seconds
  garmin_scope          String?  // OAuth scope permissions
  garmin_connected_at   DateTime? // When Garmin was connected
  garmin_last_sync_at   DateTime? // Last data sync timestamp
  
  // Garmin Permissions & Status
  garmin_permissions    Json?     // Store Garmin permission details
  garmin_is_connected  Boolean   @default(false) // Simple connected status
  garmin_disconnected_at DateTime? // When user disconnected
  
  // Garmin Rich User Data (from API)
  garmin_user_profile   Json?     // Store rich user profile data from Garmin API
  garmin_user_sleep     Json?     // Store sleep preferences
  garmin_user_preferences Json?   // Store user preferences and settings
  
  // System fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String?  // Optional status field - no default
  
  // Relations
  activities AthleteActivity[]
  
  @@map("athletes")
}

model AthleteActivity {
  id        String @id @default(cuid())
  athleteId String
  
  // Source Information
  sourceActivityId String   @unique // Garmin's unique activity ID (join key)
  source           String   @default("garmin")
  
  // Core Activity Data (Summary from /garmin/activity webhook)
  activityType     String?   // running, cycling, swimming, etc.
  activityName     String?   // "Morning Run", "Evening Bike Ride"
  startTime        DateTime? // when activity started
  duration         Int?      // duration in seconds
  distance         Float?    // distance in meters
  averageSpeed     Float?    // average speed in m/s
  calories         Int?      // calories burned
  
  // Performance Metrics (Summary data)
  averageHeartRate Int?      // average heart rate
  maxHeartRate     Int?      // maximum heart rate
  elevationGain    Float?    // elevation gain in meters
  steps            Int?      // step count (if applicable)
  
  // Location Data (Summary)
  startLatitude    Float?    // GPS start latitude
  startLongitude   Float?    // GPS start longitude
  endLatitude      Float?    // GPS end latitude
  endLongitude     Float?    // GPS end longitude
  summaryPolyline  String?   // encoded route polyline
  
  // Device Information
  deviceName       String?   // "Forerunner 255", "Edge 1040"
  garminUserId     String?   // Garmin user GUID from webhook
  
  // Hybrid Data Storage
  summaryData      Json?     // Phase 1: Summary fields from /garmin/activity
  detailData       Json?     // Phase 2: Details from /garmin/details (laps, splits, HR zones, etc.)
  hydratedAt       DateTime? // When details were hydrated
  
  // Timestamps
  syncedAt         DateTime @default(now())
  lastUpdatedAt    DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  athlete          Athlete  @relation(fields: [athleteId], references: [id], onDelete: Cascade)
  
  @@map("athlete_activities")
}

