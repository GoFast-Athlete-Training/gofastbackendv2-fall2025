
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AthleteScalarFieldEnum = {
  id: 'id',
  firebaseId: 'firebaseId',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phoneNumber: 'phoneNumber',
  gofastHandle: 'gofastHandle',
  birthday: 'birthday',
  gender: 'gender',
  city: 'city',
  state: 'state',
  primarySport: 'primarySport',
  photoURL: 'photoURL',
  bio: 'bio',
  instagram: 'instagram',
  runCrewId: 'runCrewId',
  currentPace: 'currentPace',
  weeklyMileage: 'weeklyMileage',
  trainingGoal: 'trainingGoal',
  targetRace: 'targetRace',
  trainingStartDate: 'trainingStartDate',
  preferredDistance: 'preferredDistance',
  timePreference: 'timePreference',
  paceRange: 'paceRange',
  runningGoals: 'runningGoals',
  garmin_user_id: 'garmin_user_id',
  garmin_access_token: 'garmin_access_token',
  garmin_refresh_token: 'garmin_refresh_token',
  garmin_expires_in: 'garmin_expires_in',
  garmin_scope: 'garmin_scope',
  garmin_connected_at: 'garmin_connected_at',
  garmin_last_sync_at: 'garmin_last_sync_at',
  garmin_permissions: 'garmin_permissions',
  garmin_is_connected: 'garmin_is_connected',
  garmin_disconnected_at: 'garmin_disconnected_at',
  garmin_user_profile: 'garmin_user_profile',
  garmin_user_sleep: 'garmin_user_sleep',
  garmin_user_preferences: 'garmin_user_preferences',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  status: 'status'
};

exports.Prisma.AthleteActivityScalarFieldEnum = {
  id: 'id',
  athleteId: 'athleteId',
  sourceActivityId: 'sourceActivityId',
  source: 'source',
  activityType: 'activityType',
  activityName: 'activityName',
  startTime: 'startTime',
  duration: 'duration',
  distance: 'distance',
  averageSpeed: 'averageSpeed',
  calories: 'calories',
  averageHeartRate: 'averageHeartRate',
  maxHeartRate: 'maxHeartRate',
  elevationGain: 'elevationGain',
  steps: 'steps',
  startLatitude: 'startLatitude',
  startLongitude: 'startLongitude',
  endLatitude: 'endLatitude',
  endLongitude: 'endLongitude',
  summaryPolyline: 'summaryPolyline',
  deviceName: 'deviceName',
  garminUserId: 'garminUserId',
  summaryData: 'summaryData',
  detailData: 'detailData',
  hydratedAt: 'hydratedAt',
  syncedAt: 'syncedAt',
  lastUpdatedAt: 'lastUpdatedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Athlete: 'Athlete',
  AthleteActivity: 'AthleteActivity'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\adamc\\OneDrive\\Documents\\1-GoFast\\5-Tech Stack\\gofastbackendv2-fall2025\\node_modules\\@prisma\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\adamc\\OneDrive\\Documents\\1-GoFast\\5-Tech Stack\\gofastbackendv2-fall2025\\prisma\\schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.18.0",
  "engineVersion": "34b5a692b7bd79939a9a2c3ef97d816e749cda2f",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel Athlete {\n  id         String @id @default(cuid())\n  firebaseId String @unique\n\n  // Universal Profile (MVP1 Required)\n  firstName    String?\n  lastName     String?\n  email        String    @unique\n  phoneNumber  String? // Optional phone number\n  gofastHandle String?   @unique\n  birthday     DateTime?\n  gender       String?\n  city         String?\n  state        String?\n  primarySport String?\n  photoURL     String?\n  bio          String?\n  instagram    String?\n\n  // RunCrew Integration (MVP1)\n  runCrewId String? // Optional - if null, show \"Join RunCrew\" card\n\n  // Training Profile (Future)\n  currentPace       String?\n  weeklyMileage     Int?\n  trainingGoal      String?\n  targetRace        String?\n  trainingStartDate DateTime?\n\n  // Match Profile (Future)\n  preferredDistance String?\n  timePreference    String?\n  paceRange         String?\n  runningGoals      String?\n\n  // Garmin OAuth 2.0 PKCE Integration\n  garmin_user_id       String? // Garmin's unique user ID\n  garmin_access_token  String? // OAuth access token\n  garmin_refresh_token String? // OAuth refresh token\n  garmin_expires_in    Int? // Token expiration time in seconds\n  garmin_scope         String? // OAuth scope permissions\n  garmin_connected_at  DateTime? // When Garmin was connected\n  garmin_last_sync_at  DateTime? // Last data sync timestamp\n\n  // Garmin Permissions & Status\n  garmin_permissions     Json? // Store Garmin permission details\n  garmin_is_connected    Boolean   @default(false) // Simple connected status\n  garmin_disconnected_at DateTime? // When user disconnected\n\n  // Garmin Rich User Data (from API)\n  garmin_user_profile     Json? // Store rich user profile data from Garmin API\n  garmin_user_sleep       Json? // Store sleep preferences\n  garmin_user_preferences Json? // Store user preferences and settings\n\n  // System fields\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  status    String? // Optional status field - no default\n\n  // Relations\n  activities AthleteActivity[]\n\n  @@map(\"athletes\")\n}\n\nmodel AthleteActivity {\n  id        String @id @default(cuid())\n  athleteId String\n\n  // Source Information\n  sourceActivityId String @unique // Garmin's unique activity ID (join key)\n  source           String @default(\"garmin\")\n\n  // Core Activity Data (Summary from /garmin/activity webhook)\n  activityType String? // running, cycling, swimming, etc.\n  activityName String? // \"Morning Run\", \"Evening Bike Ride\"\n  startTime    DateTime? // when activity started\n  duration     Int? // duration in seconds\n  distance     Float? // distance in meters\n  averageSpeed Float? // average speed in m/s\n  calories     Int? // calories burned\n\n  // Performance Metrics (Summary data)\n  averageHeartRate Int? // average heart rate\n  maxHeartRate     Int? // maximum heart rate\n  elevationGain    Float? // elevation gain in meters\n  steps            Int? // step count (if applicable)\n\n  // Location Data (Summary)\n  startLatitude   Float? // GPS start latitude\n  startLongitude  Float? // GPS start longitude\n  endLatitude     Float? // GPS end latitude\n  endLongitude    Float? // GPS end longitude\n  summaryPolyline String? // encoded route polyline\n\n  // Device Information\n  deviceName   String? // \"Forerunner 255\", \"Edge 1040\"\n  garminUserId String? // Garmin user GUID from webhook\n\n  // Hybrid Data Storage\n  summaryData Json? // Phase 1: Summary fields from /garmin/activity\n  detailData  Json? // Phase 2: Details from /garmin/details (laps, splits, HR zones, etc.)\n  hydratedAt  DateTime? // When details were hydrated\n\n  // Timestamps\n  syncedAt      DateTime @default(now())\n  lastUpdatedAt DateTime @default(now())\n  createdAt     DateTime @default(now())\n  updatedAt     DateTime @updatedAt\n\n  // Relations\n  athlete Athlete @relation(fields: [athleteId], references: [id], onDelete: Cascade)\n\n  @@map(\"athlete_activities\")\n}\n",
  "inlineSchemaHash": "99c3ed1648bbea9cc815adea5271500c877cccd7de15cfd2da684e4e8fe4bb1b",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Athlete\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"firebaseId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"firstName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phoneNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"gofastHandle\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"birthday\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"gender\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"city\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"state\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"primarySport\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"photoURL\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bio\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"instagram\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"runCrewId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"currentPace\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"weeklyMileage\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"trainingGoal\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"targetRace\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"trainingStartDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"preferredDistance\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"timePreference\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"paceRange\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"runningGoals\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"garmin_user_id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"garmin_access_token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"garmin_refresh_token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"garmin_expires_in\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"garmin_scope\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"garmin_connected_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"garmin_last_sync_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"garmin_permissions\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"garmin_is_connected\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"garmin_disconnected_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"garmin_user_profile\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"garmin_user_sleep\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"garmin_user_preferences\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"activities\",\"kind\":\"object\",\"type\":\"AthleteActivity\",\"relationName\":\"AthleteToAthleteActivity\"}],\"dbName\":\"athletes\"},\"AthleteActivity\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"athleteId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sourceActivityId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"source\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"activityType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"activityName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"duration\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"distance\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"averageSpeed\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"calories\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"averageHeartRate\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"maxHeartRate\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"elevationGain\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"steps\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"startLatitude\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"startLongitude\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"endLatitude\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"endLongitude\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"summaryPolyline\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"deviceName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"garminUserId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"summaryData\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"detailData\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"hydratedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"syncedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lastUpdatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"athlete\",\"kind\":\"object\",\"type\":\"Athlete\",\"relationName\":\"AthleteToAthleteActivity\"}],\"dbName\":\"athlete_activities\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

